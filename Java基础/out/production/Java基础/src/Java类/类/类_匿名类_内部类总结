一、匿名类，没有变量名的类
   作用：
   1、可以只是使用类的方法，对类的实例没有操作需求的情况下，可以直接使用匿名类
   new TestClass(){
       public void doSomething(){
           System.out.println("do another thing");
       }
   }.doSomething();

二、内部类，在类内部定义的类

   作用：
   1、内部类可以访问外部类的数据，包括private

      .内部类和外部类虽然在同一个文件中，但是和其外部类会被编译成各自的class文件，内部类通过this访问外部类的成员，因为
       编译器会为内部类自动添加一个成员变量，类型与外部类一致，他就是只想外部类对象的引用。

      .编译器自动为内部类的构造方法添加一个参数，用来传入外部类的引用。

   2、私有的内部类对同一包中的其他类不可见

      .如果想隐藏接口的实现，可以让一个私有的内部类去实现接口，然后再调用内部类的方法即可。

   3、可以解决单继承的缺陷

      .可以通过创建多个内部类分别继承不同的类，然后通过调用内部类去实现不同父类的方法

   4、使用匿名内部类可以省略大量代码

三、匿名内部类，在类中定义的匿名类

   分类：
   1.继承式的匿名内部类
   new Object(){ 定义类方法 }// 定义一个继承自Object的匿名类

   2.接口式的匿名内部类
   new Interface(){ 实现接口方法。。 }// 定义一个实现了Interface接口的匿名类

   3.参数式的匿名内部类

   匿名内部类注意点：
   1、不能有构造方法
   2、不能定义静态的（成员、方法和类）
   3、不能是public、protected，private、static
   4、只能创建匿名内部类的一个实例