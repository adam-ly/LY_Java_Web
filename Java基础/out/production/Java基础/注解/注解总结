

Java 注解用于为 Java 代码提供元数据。作为元数据，它不会影响代码的运行，但有一些类型的注解可以用于这一目的。

一、普通的注解没有意义，需要用元注解来为他约定适用的范围和场景，下面的常用的系统《元注解》：
   1、@Target: 用来指定当前注解适用的目标
   2、@Retention: 指定当前注解的有效范围
   3、Documented: 表示注解类型包含的信息会被加到JavaDoc文档中
   4、inherited:  表示注解可以被继承
   5、Repeatable: 表示注解可以被重复适用，一个方法可以用多个同样(不同参)的注解。

二、注解的本质就是一个Annotation接口

   public interface Annotation {
       boolean equels(Object obj);
       int hashCode();
       Class<? extends Annotation> annotationType();
   }

三、接口无法定义成员变量的，所以注解中的成员变量带有括号，其实就是方法。它可以定义的属性类型为
    1、基本数据类型
    2、String
    3、枚举
    4、注解类型
    5、Class类型
    6、以上类型的数组类型（一维）

   给注解定义属性时，在使用时需要给属性赋值:
    1、定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值
    2、如果只有一个属性需要赋值，而且属性名为value，则value可以省略，直接定义值即可。
    3、数组赋值时，使用{}包括，如果只有一个值，那么{}可以省略

四、通过反射来获取注解的属性，那么注解的Retention要设置为Runtime,这样注解的内容才会被写入到class文件中，才能在运行时获取

